/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.login;

import dao.LoginDAO;
import form.DlgMenuConsultas;
import form.FrmTelaPrincipal;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.security.auth.login.LoginException;
import javax.swing.JOptionPane;
import model.Login;

/**
 *
 * @author Acerpc
 */
public class FrmLogin extends javax.swing.JFrame {

    /**
     * Creates new form FrmLogin
     */
    public FrmLogin() {
        initComponents();
    }
    LoginDAO loginDAO = new LoginDAO();
    Login login = new Login();
    FrmTelaPrincipal telaPrincipal = new FrmTelaPrincipal();
    DlgMenuConsultas menu = new DlgMenuConsultas(this, rootPaneCheckingEnabled);

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelLogin = new javax.swing.JLabel();
        loginSenha = new javax.swing.JLabel();
        tfLogin = new javax.swing.JTextField();
        btEntrar = new javax.swing.JButton();
        btFechar = new javax.swing.JButton();
        pfSenha = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Login");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        labelLogin.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        labelLogin.setText("Login");

        loginSenha.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        loginSenha.setText("Senha");

        tfLogin.setToolTipText("");

        btEntrar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btEntrar.setText("Entrar");
        btEntrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEntrarActionPerformed(evt);
            }
        });

        btFechar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btFechar.setText("Fechar");
        btFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFecharActionPerformed(evt);
            }
        });

        pfSenha.setToolTipText("");
        pfSenha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pfSenhaKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 45, Short.MAX_VALUE)
                        .addComponent(btEntrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btFechar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(loginSenha)
                            .addComponent(labelLogin))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfLogin)
                            .addComponent(pfSenha))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelLogin)
                    .addComponent(tfLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginSenha)
                    .addComponent(pfSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btFechar)
                    .addComponent(btEntrar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btEntrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEntrarActionPerformed
        try {
            if (new LoginDAO().pesquisarPorNivel(1) == null) {
                try {
                    validar();
                    getDados();
                    loginDAO.cadastrar(login);
                    telaPrincipal.verificarNivel(1);
                    this.dispose();
                    telaPrincipal.setVisible(true);
                } catch (LoginException ex) {
                    JOptionPane.showMessageDialog(this, "ERRO: " + ex.getMessage());
                }
            } else {
                try {
                    validar();
                    if (verificarLogin(pegarDadosVerificar())) {
                        if (verificar(login).getNivel() == 1) {
                            telaPrincipal.verificarNivel(1);
                            this.dispose();
                            telaPrincipal.setVisible(true);
                        } else if (verificar(login).getNivel() == 2) {
                            telaPrincipal.verificarNivel(2);
                            this.dispose();
                            telaPrincipal.setVisible(true);
                        } else {
                            menu.verificarNivel(3);
                            this.dispose();
                            menu.setVisible(true);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Login/senha incorreto/inexistente");
                    }
                } catch (LoginException ex) {
                    JOptionPane.showMessageDialog(this, "ERRO: " + ex.getMessage());
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmLogin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btEntrarActionPerformed

    private void btFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFecharActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btFecharActionPerformed

    private void pfSenhaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pfSenhaKeyPressed
        getRootPane().setDefaultButton(btEntrar);
    }//GEN-LAST:event_pfSenhaKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmLogin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btEntrar;
    private javax.swing.JButton btFechar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelLogin;
    private javax.swing.JLabel loginSenha;
    private javax.swing.JPasswordField pfSenha;
    private javax.swing.JTextField tfLogin;
    // End of variables declaration//GEN-END:variables
    public static String criptografar(String valor) throws NoSuchAlgorithmException, UnsupportedEncodingException {

        //Note que o Algoritmo de criptografia é fornecido por parâmetro.
        //Nesse caso 'MD5' poderia ser 'SHA1'.
        MessageDigest md = MessageDigest.getInstance("MD5");

        //A instância de MessageDigest foi atualizada com o valor da String 
        //fornecida como parâmetro, neste caso foi fornecida a codificação 
        //para obtenção dos bytes da String, mas esse parâmetro é opcional.
        md.update(valor.getBytes("UTF8"));

        //É nesse ponto que é gerado um array de bytes contendo o resultado 
        //da criptografia utilizando o Algoritmo fornecido.
        byte[] s = md.digest();

        //Como precisamos do hash em String precisamos executar os seguintes
        //três passos básicos para tal necessidade:
        BigInteger hash1 = new BigInteger(1, s);
        String hash = hash1.toString(16);
        while (hash.length() < 32) {
            hash = "0" + hash;
        }

        return hash;
    }

    private void getDados() {
        try {
            login.setNivel(1);
            login.setUsuario(tfLogin.getText());
            login.setSenha(criptografar(new String(pfSenha.getPassword())));
        } catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {
            Logger.getLogger(FrmLogin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private Login pegarDadosVerificar() {
        try {
            login = new Login(
                    tfLogin.getText(),
                    criptografar(new String(pfSenha.getPassword())));
        } catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {
            Logger.getLogger(FrmLogin.class.getName()).log(Level.SEVERE, null, ex);
        }
        return login;
    }

    private boolean verificarLogin(Login login) throws SQLException {
        Login verificar = loginDAO.pesquisarPorNome(login.getUsuario());
        if (verificar != null && verificar.getUsuario().equals(login.getUsuario()) && verificar.getSenha().equals(login.getSenha())) {
            return true;
        }
        return false;
    }

    private Login verificar(Login login) throws SQLException {
        Login verificar = loginDAO.pesquisarPorNome(login.getUsuario());
        return verificar;
    }

    private void validar() throws LoginException {
        if (new String(pfSenha.getPassword()).isEmpty()) {
            throw new LoginException("Senha obrigatória!");
        }

        if (tfLogin.getText().isEmpty()) {
            throw new LoginException("Login obrigatório!");
        }

        if (tfLogin.getText().length() < 6) {
            throw new LoginException("O login deve conter no mínimo 6 caracteres.");
        }

        if (new String(pfSenha.getPassword()).length() < 8) {
            throw new LoginException("A senha deve conter no mínimo 8 caracteres.");
        }
//        if (!new String(pfSenha.getPassword()).contains("ABCDEFGHIJKLMNOPQRSTUVXWYZ")) {
//            throw new LoginException("A senha deve conter no mínimo 1 letra maiúscula.");
//        }
//        
//        if (!new String(pfSenha.getPassword()).contains("abcdefghijklmnopqrstuvxwyz")) {
//            throw new LoginException("A senha deve conter no mínimo 1 letra minuscula.");
//        }
//        
//        if (!new String(pfSenha.getPassword()).contains("1234567890")) {
//            throw new LoginException("A senha deve conter no mínimo 1 número.");
//        }
//        
//        if (!new String(pfSenha.getPassword()).contains("'!@#$%¨&*()_+{}^`<>:|,.;~]´[ç=-¹²³£¢¬ºª§")) {
//            throw new LoginException("A senha deve conter no mínimo 1 caractere especial. Ex.: ?, !, %, @.");
//        }
    }
}
